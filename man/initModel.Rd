% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/initModel.r
\name{initModel}
\alias{initModel}
\title{Create model object and generate code}
\usage{
initModel(dir, xlFile, funsR, funsF, sheets)
}
\arguments{
\item{dir}{Directory where input files are located. This value is added as a
prefix to any file names (i.e. \code{xlFile}, \code{funsR}, \code{funsF}).}

\item{xlFile}{Base name of file in MS Excel format with the model definition.}

\item{funsR}{Base name of file with function definitions in R.}

\item{funsF}{Base name of file with function definitions in Fortran 95.}

\item{sheets}{Named vector with required elements 'vars', 'pars', 'funs',
  'pros', and 'stoi'. These elements define the names of the worksheets in
  \code{xlFile} holding the declaration of variables, parameters, functions,
  process rates, and stoichiometry factors, respectively.}
}
\value{
A list with the following components.
\itemize{
  \item{\code{model} : } Object of class \code{rodeo} representing the model.
  \item{\code{dllfile} : } Shared library with compiled Fortran code.
  \item{\code{funsR} : } Full name of the file with R functions.
  \item{\code{vars} : } Worksheet with variable declarations (data frame).
  \item{\code{pars} : } Worksheet with parameter declarations (data frame).
}
}
\description{
Creates a model object from user inputs and builds a shared library
from generated Fortran code.
}
\note{
An error is generated if the integration was not successful.
}
\author{
David Kneis \email{david.kneis@tu-dresden.de}
}

